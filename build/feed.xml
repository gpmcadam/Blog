<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gary.mcad.am</title>
    <atom:link href="http://gary.mcad.am/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://gary.mcad.am</link>
    <description>I paid for this domain, I might aswell use it</description>
    <pubDate>Thu, 03 Dec 2015 23:42:44 +0000</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Devember Day 3</title>
      <link>http://gary.mcad.am/articles/devember-03/</link>
      <pubDate>Thu, 03 Dec 2015 23:42:44 +0000</pubDate>
      <guid isPermaLink="true">http://gary.mcad.am/articles/devember-03/</guid>
      <author></author>
      <description>&lt;p&gt;I &amp;lt;3 React! &lt;span class=&quot;more&quot;&gt;&lt;/span&gt; Seriously, it’s great.&lt;/p&gt;
&lt;div style=&quot;width: 100px; margin: 1em auto; border: 1px solid #000;&quot;&gt;
    &lt;img src=&quot;/articles/devember-03/tayne.gif&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;It mixes really well with ES6, and while it takes a while to understand
the nuances, once you get to grips with it &amp;ndash; even a little &amp;ndash;
it pays off.&lt;/p&gt;
&lt;p&gt;Today was a very productive hour, which started with me reluctantly
opening my laptop in bed. I wasn’t very excited to carry on after
&lt;a href=&quot;http://gary.mcad.am/articles/devember-02&quot;&gt;last night’s fiasco&lt;/a&gt;, but I’ve made up for it today I think.&lt;/p&gt;
&lt;p&gt;I’ve not got a &lt;em&gt;huge&lt;/em&gt; amount done (just one small commit) but what’s
there has lead me to learn a lot about React and ES6.&lt;/p&gt;
&lt;h2 id=&quot;mocking-with-lumen&quot;&gt;Mocking with Lumen&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://lumen.laravel.com&quot;&gt;Lumen&lt;/a&gt; (or rather Laravel, really) allows for very quick mocking of API
in the &lt;strong&gt;app/routes.php&lt;/strong&gt; file. I’ve got a simple API structure up and
running to serve out the data for the user profile selector: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$app-&amp;gt;group([&amp;#39;prefix&amp;#39; =&amp;gt; &amp;#39;api/profile&amp;#39;], function () use ($app) {
    $app-&amp;gt;get(&amp;#39;/&amp;#39;, function() use($app) {
        return response()-&amp;gt;json([
                &amp;#39;profiles&amp;#39; =&amp;gt; [
                    [
                        &amp;#39;id&amp;#39; =&amp;gt; 1,
                        &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Arya&amp;#39;
                    ],
                    [
                        &amp;#39;id&amp;#39; =&amp;gt; 2,
                        &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Brandon&amp;#39;
                    ]
                ]
            ]);
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;reactive-components&quot;&gt;Reactive Components&lt;/h2&gt;
&lt;p&gt;I now have a simple component structure set up in react, and I’m
rendering my profile selector like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Bloon/ProfileSelect.jsx
import React from &amp;#39;react&amp;#39;;
import $ from &amp;#39;jquery&amp;#39;;
import Profile from &amp;#39;./Profile&amp;#39;;

class ProfileSelect extends React.Component {

    /**
     * ProfileSelect Constructor
     */
    constructor(props) {
        super(props)
        this.mounted = false;
        this.state = { profiles: [] };
    }

    /**
     * componentDidMount event handler - fetches
     * the component state via AJAX
     */
    componentDidMount() {
        this.mounted = true;
        Promise.resolve(
            $.get(&amp;#39;/api/profile/&amp;#39;)
        )
        .then(function(data) {
            if (this.mounted === true) {
                this.setState({
                    profiles: data.profiles
                })
            }
        }.bind(this))
        .catch(function(err) {
            console.log(err);
        });
    }

    /**
     * componentWillUnmount event handler
     */
    componentWillUnmount() {
        this.state = {};
        this.mounted = false;
    }

    /**
     * render handler
     */
    render() {
        return (
            &amp;lt;section className=&amp;quot;profiles&amp;quot;&amp;gt;{
                this.state.profiles.map(profile =&amp;gt; &amp;lt;Profile key={profile.id} profile={profile} /&amp;gt;)
            }
            &amp;lt;/section&amp;gt;
        )
    }
}

export default ProfileSelect;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above snippet, we consume our API method and keep
track of our component mount state. This means our
component state is handled asynchronously and allows it
to re-render cleanly whenever the AJAX returns.&lt;/p&gt;
&lt;p&gt;I’m not sure how efficient this is in the long term, I’ll need
to investigate ways to streamline the access of the data from
our PHP backend to React.&lt;/p&gt;
&lt;p&gt;The thing I was most excited to discover is in our render function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render() {
    return (
        &amp;lt;section className=&amp;quot;profiles&amp;quot;&amp;gt;{
            this.state.profiles.map(profile =&amp;gt; &amp;lt;Profile key={profile.id} profile={profile} /&amp;gt;)
        }
        &amp;lt;/section&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;width: 250px; margin: 1em auto; text-align: center; color: #ccc&quot;&gt;
    &lt;img src=&quot;/articles/devember-03/tasty.gif&quot; alt=&quot;&quot;&gt;
    &lt;em&gt;Tasty!&lt;/em&gt;
&lt;/div&gt;


&lt;p&gt;This is just &lt;em&gt;beautiful&lt;/em&gt; to me. In short, we render our
component as an HTML section element, and inside it
we map each of the profiles returning a Profile component.&lt;/p&gt;
&lt;p&gt;We do this so cleanly using &lt;a href=&quot;https://strongloop.com/strongblog/an-introduction-to-javascript-es6-arrow-functions/&quot;&gt;ES6 arrow functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And our Profile component looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Bloon/Profile.jsx
import React from &amp;#39;react&amp;#39;;

class Profile extends React.Component {
    render() {
        return &amp;lt;div&amp;gt;{this.props.profile.name}&amp;lt;/div&amp;gt;
    }
}

export default Profile;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In Chrome, using &lt;a href=&quot;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en&quot;&gt;React Developer Tools&lt;/a&gt;, we can can see our React
components in the virtual DOM:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/devember-03/reactdom.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;It’s onwards and upwards from here. I’ll flesh out the UI in the
days to come which will give me a chance to mock the rest of the API.
Following that I’ll go back and fill in the gaps of the API and then
finalise the functionality.&lt;/p&gt;
&lt;h2 id=&quot;today-s-observations&quot;&gt;Today’s Observations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;React and ES6 seem to work well but there’s lots of room for
improvement, this is apparent to me after only a few hours.&lt;/li&gt;
&lt;li&gt;Also, on React, I think they should take a leaf out of Meteor’s
books in terms of allowing more tightly coupled data bindings
with a backend API&lt;/li&gt;
&lt;li&gt;Shoutout to &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; and &lt;a href=&quot;https://github.com/babel/babelify&quot;&gt;Babelify&lt;/a&gt;
for making everything so easy! Starting to really appreciate its benefit now.&lt;/li&gt;
&lt;li&gt;Need to think about how to speed up build time with gulp. Hmm.&lt;/li&gt;
&lt;li&gt;Stats for today: 1 commit, time spent 1h 17m 28s&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Devember Day 2</title>
      <link>http://gary.mcad.am/articles/devember-02/</link>
      <pubDate>Thu, 03 Dec 2015 01:47:39 +0000</pubDate>
      <guid isPermaLink="true">http://gary.mcad.am/articles/devember-02/</guid>
      <author></author>
      <description>&lt;p&gt;Day 2, and I’ve spent 4 hours this evening just fighting to get
ReactJS to compile to ES5. Maybe I can just skip the next 3 days
to compensate?&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div style=&quot;width: 200px; margin: 1em auto; border: 1px solid #000;&quot;&gt;
    &lt;img src=&quot;/articles/devember-02/fngggg.gif&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;That’s how I feel right now, anyway.&lt;/p&gt;
&lt;p&gt;I’m a huge fan of ReactJS and I’ve been desperate to use it on a project
for ages. Unfortunately ReactJS and its community are moving so
quickly that they haven’t stopped to document things properly
and because of how quick it’s changing, any community guides are already outdated.&lt;/p&gt;
&lt;p&gt;Tonight consisted of swapping and hacking between various combinations of
grunt, gulp, webpack, browserify, babel and react. I’m still not sure
what the best combination is &amp;ndash; nor that any of the above is even required
(seriously why is it so hard to get the default Hello World running using the
suggested method of &lt;code&gt;babel-cli&lt;/code&gt;?!)&lt;/p&gt;
&lt;p&gt;I’ve finally got everything running with the help of a friendly user in the
React IRC channel. But I’m a little dissuaded already.&lt;/p&gt;
&lt;p&gt;Sometimes there’s a comfort in being given a strict set of tools, and I wonder
if React needs time to settle on a way of pre-compilation. Right now it’s a bit
of a minefield.&lt;/p&gt;
&lt;p&gt;Anyway after many hours of frustration, I’ve ended up with a combination of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gulp&lt;/li&gt;
&lt;li&gt;babel&lt;/li&gt;
&lt;li&gt;babelify&lt;/li&gt;
&lt;li&gt;browserify&lt;/li&gt;
&lt;li&gt;react (+ react-dom)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m still getting to grips with what everything is, but it’s a real shame
to spend the evening bashing your head against the wall just trying to
get some JavaScript to pre-compile.&lt;/p&gt;
&lt;p&gt;For now, it’s rendering. So while I have 0 commits, I’m happy enough that
tomorrow at least I’ll get to write a line of code (hopefully!) or maybe
I’ll distract myself by implementing some of the UI instead.&lt;/p&gt;
&lt;h2 id=&quot;today-s-observations&quot;&gt;Today’s Observations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;At the start of this project I decided to test out Atom. I had previously
been using Sublime Text 3 (which I use full time otherwise). My summary:
it’s a great idea and an amazing achievement, but I’m not sure it’s ready
to be used generally. I’ll revisit this editor in the future, but even for
this small side project, it’s not up to the task.
&lt;img src=&quot;/articles/devember-02/bye-bye-atom.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Stats for today: 0 commits, time spent 4h&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Devember Day 1</title>
      <link>http://gary.mcad.am/articles/devember-01/</link>
      <pubDate>Tue, 01 Dec 2015 23:03:56 +0000</pubDate>
      <guid isPermaLink="true">http://gary.mcad.am/articles/devember-01/</guid>
      <author></author>
      <description>&lt;p&gt;Day 1! I’ve managed to squeeze in 1 hour of development time this
evening&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;, in which I’ve completed the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup the Lumen framework&lt;/li&gt;
&lt;li&gt;Configure Vagrant with Ubuntu and nginx&lt;/li&gt;
&lt;li&gt;Write and import the first set of database migrations&lt;/li&gt;
&lt;li&gt;I’ve now set up
&lt;a href=&quot;https://github.com/gpmcadam/bloon&quot;&gt;a public Github repository&lt;/a&gt;
to track the project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fairly productive hour; looking forward to working on seeding the database
and hopefully starting on the UI in the next couple of days. I’m eager to
try out Browsersync, since seeing
&lt;a href=&quot;https://www.youtube.com/watch?v=heNWfzc7ufQ&quot;&gt;a cool demo of it&lt;/a&gt; yesterday.&lt;/p&gt;
&lt;h2 id=&quot;today-s-observations&quot;&gt;Today’s Observations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It took me a while to get used to the small differences between Lumen
and Laravel. Mainly the lack of some
&lt;a href=&quot;http://laravel.com/docs/5.1/artisan&quot;&gt;&lt;strong&gt;artisan&lt;/strong&gt;&lt;/a&gt; commands that I’ve
grown used to (such as &lt;code&gt;key:generate&lt;/code&gt; and &lt;code&gt;tinker&lt;/code&gt;), and also that
certain aspects of the framework are disabled by default, including DotEnv,
and have to be enabled manually in &lt;code&gt;bootsrap/app.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In my Googling today, a typo lead me to a genuine
&lt;a href=&quot;http://gary.mcad.am/articles/devember-01/%22https://en.wikipedia.org/wiki/Googlewhack%22&quot;&gt;Googlewhack!&lt;/a&gt;
&lt;img src=&quot;/articles/devember-01/googlewhack.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Stats for today: 5 commits, time spent 1h 5m 10s&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Devember as a conduit for escaping procrastination</title>
      <link>http://gary.mcad.am/articles/devember/</link>
      <pubDate>Fri, 27 Nov 2015 22:48:56 +0000</pubDate>
      <guid isPermaLink="true">http://gary.mcad.am/articles/devember/</guid>
      <author></author>
      <description>&lt;p&gt;So, I’ll be doing &lt;a href=&quot;http://devember.org/&quot;&gt;#Devember&lt;/a&gt; this year for the first time. What’s Devember?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Devember is a challenge you take up. It is an excuse for programming, for learning to code and for sharing it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rules are simple: &lt;strong&gt;write code on a project every day in December.&lt;/strong&gt; There’s some extra bits about it being
publicly accessible and doing a daily dev blog &amp;ndash; I’ll do my best to adhere to these but honestly I’ll
be happy to simply write a commit every day.&lt;/p&gt;
&lt;p&gt;My personal goals for Devember are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Explore some technologies on my list that I’ve not given myself time to&lt;/li&gt;
&lt;li&gt;Force me to continue work on a project I’ve been meaning to do in my spare time for a while&lt;/li&gt;
&lt;li&gt;Enable me to write about programming on my blog more often&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;
&lt;p&gt;The project is a toddler-friendly YouTube app I’ve had on my list for a while. It’s called &lt;strong&gt;Bloon&lt;/strong&gt; and it
looks&amp;ndash;or will look&amp;ndash;like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/devember/bloon.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The idea is that parents create playlists for their toddler to browse in a child-friendly user interface
with minimal clutter and simple interface elements. They “pop” a baloon of their favourite character
and off they go!&lt;/p&gt;
&lt;p&gt;The goal is ultimately to release this as a native app on iOS and Android, but for the first iteration
I’ll be writing it as an in-browser only experience.&lt;/p&gt;
&lt;h2 id=&quot;the-methodology&quot;&gt;The Methodology&lt;/h2&gt;
&lt;p&gt;I don’t anticipate having anything near a working prototype by the end of December, but I hope I’ll to be
most of the way there for my first version.&lt;/p&gt;
&lt;p&gt;I’ll be writing the web version in PHP using &lt;a href=&quot;http://lumen.laravel.com/&quot;&gt;Lumen&lt;/a&gt; to serve the API,
with a MySQL database and &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; to handle handle rendering of the UI.&lt;/p&gt;
&lt;p&gt;I’m familiar with Laravel and MySQL but not Lumen or React with only minimal experience. So this will be
a great opportunity to explore these areas.&lt;/p&gt;
&lt;p&gt;The development stack will look something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server Infrastructure:&lt;/strong&gt; Ubuntu + Vagrant + nginx&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backend:&lt;/strong&gt; PHP + Lumen + MySQL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frontend:&lt;/strong&gt; Twitter Bootstrap + LESS + React&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;follow-my-progress&quot;&gt;Follow My Progress&lt;/h2&gt;
&lt;p&gt;I’ll commit my work to &lt;a href=&quot;https://github.com/gpmcadam&quot;&gt;github&lt;/a&gt; and share information
about my progress as I go on this blog and give a brief summary in the New Year of how everything went.&lt;/p&gt;
&lt;p&gt;I’ve also started &lt;a href=&quot;https://trello.com/b/E0sJf6x3/bloon-devember&quot;&gt;a board on Trello&lt;/a&gt; to track my progress.&lt;/p&gt;
&lt;p&gt;I have a busy schedule this month, my guess is December is the most social month, even for hermits like me! So
I’m anticipating there’ll be some days where doing an hour of programming will be … difficult. I’ll share that, too.&lt;/p&gt;
&lt;p&gt;You can track my progress here, and in byte-sized snippets on &lt;a href=&quot;https://twitter.com/gpmcadam&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, here’s the silly contract you’re meant to stick on your announcement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I, Gary McAdam, will participate to the next Devember. My Devember will be Bloon (see above). I promise I will program for my Devember for at least an hour, every day of the next December. I will also write a daily public devlog and will make the produced code publicly available on the internet. No matter what, I will keep my promise. &lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    <item>
      <title>Reddit Live Comments Chrome Extension</title>
      <link>http://gary.mcad.am/articles/chrome-reddit-live-comments/</link>
      <pubDate>Sat, 13 Jun 2015 14:12:01 +0100</pubDate>
      <guid isPermaLink="true">http://gary.mcad.am/articles/chrome-reddit-live-comments/</guid>
      <author></author>
      <description>&lt;p&gt;Update comment threads on reddit automatically with this Chrome Extension.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/fYxwrbAjFoDjGxFkDOacpP8bkG7SGjIm39rMjILryLLnswsj3CEhikRhabxLFIJEqcPjrJ4VDA=s640-h400-e365-rw&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/reddit-live/gfmgldfmppamhojkggjlonpboiobnbpe?hl=en-GB&amp;amp;gl=GB&quot;&gt;View the Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gpmcadam/chrome-reddit-live-comments&quot;&gt;View the Source Code on github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-to-install&quot;&gt;How to Install&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install the extension&lt;/li&gt;
&lt;li&gt;Load a comment thread on &lt;a href=&quot;https://reddit.com&quot;&gt;&lt;em&gt;reddit&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;‘Sort By’&lt;/strong&gt; menu, sort comments by &lt;strong&gt;‘live’&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>